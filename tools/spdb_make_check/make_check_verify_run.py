import argparse
import make_check_utils as mcu
from make_check_utils import\
    add_cmdline_arg_ref_log,\
    add_cmdline_optional_arg_description, \
    add_cmdline_arg_csv,\
    add_cmdline_optional_arg_ignore_too_long,\
    add_cmdline_optional_arg_min_time,\
    add_cmdline_optional_arg_min_ref_time_increase, \
    add_cmdline_optional_arg_report_full_diff
import make_check_collect_logs
import make_check_compare

parser = argparse.ArgumentParser(
    formatter_class=argparse.ArgumentDefaultsHelpFormatter)
add_cmdline_arg_ref_log(parser)
parser.add_argument("new_logs_folder",
                    metavar="[new logs folder name]",
                    help="log filename for the new run generated by "
                         "make_check_collect_logs")
parser.add_argument("-n", "--new-log-full-name",
                    help="file name that will store the unified "
                         "collected New logs",
                    default="make_check_new.log")
add_cmdline_optional_arg_description(parser)
add_cmdline_arg_csv(parser)
add_cmdline_optional_arg_ignore_too_long(parser)
add_cmdline_optional_arg_min_time(parser)
add_cmdline_optional_arg_min_ref_time_increase(parser)
add_cmdline_optional_arg_report_full_diff(parser)
mcu.cmdline_args = parser.parse_args()

if not mcu.check_cmdline_conflicts():
    exit(2)

print(f"Collecting Logs from {mcu.cmdline_args.new_logs_folder}  into"
      f" {mcu.cmdline_args.new_log_full_name}")
make_check_collect_logs.collect_logs_and_write_unified(
    mcu.cmdline_args.new_logs_folder,
    mcu.cmdline_args.new_log_full_name,
    mcu.cmdline_args.description)

print(f"Comparing to {mcu.cmdline_args.ref_log_full_name} reference file")
exit_code = \
    make_check_compare.compare_runs_and_write_diff_to_csv(
        mcu.cmdline_args.ref_log_full_name,
        mcu.cmdline_args.new_log_full_name,
        mcu.cmdline_args.diff_csv_full_name)
exit(exit_code)
